/*
 * datarhei Core API
 * Expose REST API for the datarhei Core
 *
 * OpenAPI spec version: 3.0
 * Contact: hello@datarhei.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiAbout;
import io.swagger.client.model.ApiCommand;
import io.swagger.client.model.ApiConfig;
import io.swagger.client.model.ApiConfigError;
import io.swagger.client.model.ApiError;
import io.swagger.client.model.ApiFileInfo;
import io.swagger.client.model.ApiGraphQuery;
import io.swagger.client.model.ApiGraphResponse;
import io.swagger.client.model.ApiJWT;
import io.swagger.client.model.ApiJWTRefresh;
import io.swagger.client.model.ApiLogin;
import io.swagger.client.model.ApiMetricsQuery;
import io.swagger.client.model.ApiMetricsResponse;
import io.swagger.client.model.ApiPlayoutStatus;
import io.swagger.client.model.ApiProbe;
import io.swagger.client.model.ApiProcess;
import io.swagger.client.model.ApiProcessConfig;
import io.swagger.client.model.ApiProcessReport;
import io.swagger.client.model.ApiProcessState;
import io.swagger.client.model.ApiRTMPChannel;
import io.swagger.client.model.ApiSessionsActive;
import io.swagger.client.model.ApiSessionsSummary;
import io.swagger.client.model.ApiSetConfig;
import io.swagger.client.model.ApiSkills;
import io.swagger.client.model.ApiWidgetProcess;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * API version and build infos
     *
     * API version and build infos in case auth is valid or not required. If auth is required, just the name field is populated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aboutTest() throws Exception {
        ApiAbout response = api.about();

        // TODO: test validations
    }
    
    /**
     * Retrieve the currently active Restreamer configuration
     *
     * Retrieve the currently active Restreamer configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void config3GetTest() throws Exception {
        ApiConfig response = api.config3Get();

        // TODO: test validations
    }
    
    /**
     * Reload the currently active configuration
     *
     * Reload the currently active configuration. This will trigger a restart of the Restreamer.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void config3ReloadTest() throws Exception {
        String response = api.config3Reload();

        // TODO: test validations
    }
    
    /**
     * Update the current Restreamer configuration
     *
     * Update the current Restreamer configuration by providing a complete or partial configuration. Fields that are not provided will not be changed.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void config3SetTest() throws Exception {
        ApiSetConfig config = null;
        String response = api.config3Set(config);

        // TODO: test validations
    }
    
    /**
     * Remove a file from the filesystem
     *
     * Remove a file from the filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void diskfs3DeleteFileTest() throws Exception {
        String path = null;
        String response = api.diskfs3DeleteFile(path);

        // TODO: test validations
    }
    
    /**
     * Fetch a file from the filesystem
     *
     * Fetch a file from the filesystem. The contents of that file are returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void diskfs3GetFileTest() throws Exception {
        String path = null;
        File response = api.diskfs3GetFile(path);

        // TODO: test validations
    }
    
    /**
     * List all files on the filesystem
     *
     * List all files on the filesystem. The listing can be ordered by name, size, or date of last modification in ascending or descending order.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void diskfs3ListFilesTest() throws Exception {
        String glob = null;
        String sort = null;
        String order = null;
        List<ApiFileInfo> response = api.diskfs3ListFiles(glob, sort, order);

        // TODO: test validations
    }
    
    /**
     * Add a file to the filesystem
     *
     * Writes or overwrites a file on the filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void diskfs3PutFileTest() throws Exception {
        String path = null;
        List<Integer> data = null;
        String response = api.diskfs3PutFile(path, data);

        // TODO: test validations
    }
    
    /**
     * Fetch a file from the filesystem
     *
     * Fetch a file from the filesystem. If the file is a directory, a index.html is returned, if it exists.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void diskfsGetFileTest() throws Exception {
        String path = null;
        File response = api.diskfsGetFile(path);

        // TODO: test validations
    }
    
    /**
     * Load GraphQL playground
     *
     * Load GraphQL playground
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphPlaygroundTest() throws Exception {
        api.graphPlayground();

        // TODO: test validations
    }
    
    /**
     * Query the GraphAPI
     *
     * Query the GraphAPI
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphQueryTest() throws Exception {
        ApiGraphQuery query = null;
        ApiGraphResponse response = api.graphQuery(query);

        // TODO: test validations
    }
    
    /**
     * Retrieve an access and a refresh token
     *
     * Retrieve valid JWT access and refresh tokens to use for accessing the API. Login either by username/password or Auth0 token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void jwtLoginTest() throws Exception {
        ApiLogin data = null;
        ApiJWT response = api.jwtLogin(data);

        // TODO: test validations
    }
    
    /**
     * Retrieve a new access token
     *
     * Retrieve a new access token by providing the refresh token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void jwtRefreshTest() throws Exception {
        ApiJWTRefresh response = api.jwtRefresh();

        // TODO: test validations
    }
    
    /**
     * Application log
     *
     * Get the last log lines of the Restreamer application
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void log3Test() throws Exception {
        String format = null;
        List<String> response = api.log3(format);

        // TODO: test validations
    }
    
    /**
     * Fetch a file from the memory filesystem
     *
     * Fetch a file from the memory filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfs3GetFileApiTest() throws Exception {
        String path = null;
        File response = api.memfs3GetFileApi(path);

        // TODO: test validations
    }
    
    /**
     * List all files on the memory filesystem
     *
     * List all files on the memory filesystem. The listing can be ordered by name, size, or date of last modification in ascending or descending order.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfs3ListFilesTest() throws Exception {
        String glob = null;
        String sort = null;
        String order = null;
        List<ApiFileInfo> response = api.memfs3ListFiles(glob, sort, order);

        // TODO: test validations
    }
    
    /**
     * Create a link to a file in the memory filesystem
     *
     * Create a link to a file in the memory filesystem. The file linked to has to exist.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfs3PatchTest() throws Exception {
        String path = null;
        String url = null;
        String response = api.memfs3Patch(path, url);

        // TODO: test validations
    }
    
    /**
     * Add a file to the memory filesystem
     *
     * Writes or overwrites a file on the memory filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfs3PutFileApiTest() throws Exception {
        String path = null;
        List<Integer> data = null;
        String response = api.memfs3PutFileApi(path, data);

        // TODO: test validations
    }
    
    /**
     * Remove a file from the memory filesystem
     *
     * Remove a file from the memory filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfsDeleteFileTest() throws Exception {
        String path = null;
        String response = api.memfsDeleteFile(path);

        // TODO: test validations
    }
    
    /**
     * Remove a file from the memory filesystem
     *
     * Remove a file from the memory filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfsDeleteFileApiTest() throws Exception {
        String path = null;
        String response = api.memfsDeleteFileApi(path);

        // TODO: test validations
    }
    
    /**
     * Fetch a file from the memory filesystem
     *
     * Fetch a file from the memory filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfsGetFileTest() throws Exception {
        String path = null;
        File response = api.memfsGetFile(path);

        // TODO: test validations
    }
    
    /**
     * Add a file to the memory filesystem
     *
     * Writes or overwrites a file on the memory filesystem
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void memfsPutFileTest() throws Exception {
        String path = null;
        List<Integer> data = null;
        String response = api.memfsPutFile(path, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve JSON metadata from a key
     *
     * Retrieve the previously stored JSON metadata under the given key. If the key is empty, all metadata will be returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void metadata3GetTest() throws Exception {
        String key = null;
        Object response = api.metadata3Get(key);

        // TODO: test validations
    }
    
    /**
     * Add JSON metadata under the given key
     *
     * Add arbitrary JSON metadata under the given key. If the key exists, all already stored metadata with this key will be overwritten. If the key doesn&#39;t exist, it will be created.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void metadata3SetTest() throws Exception {
        String key = null;
        Object data = null;
        Object response = api.metadata3Set(key, data);

        // TODO: test validations
    }
    
    /**
     * Prometheus metrics
     *
     * Prometheus metrics
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void metricsTest() throws Exception {
        String response = api.metrics();

        // TODO: test validations
    }
    
    /**
     * Query the collected metrics
     *
     * Query the collected metrics
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void metrics3MetricsTest() throws Exception {
        ApiMetricsQuery config = null;
        ApiMetricsResponse response = api.metrics3Metrics(config);

        // TODO: test validations
    }
    
    /**
     * Liveliness check
     *
     * Liveliness check
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pingTest() throws Exception {
        String response = api.ping();

        // TODO: test validations
    }
    
    /**
     * Retrieve profiling data from the application
     *
     * Retrieve profiling data from the application
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void profilingTest() throws Exception {
        String response = api.profiling();

        // TODO: test validations
    }
    
    /**
     * Add a new process
     *
     * Add a new FFmpeg process
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3AddTest() throws Exception {
        ApiProcessConfig config = null;
        ApiProcessConfig response = api.restream3Add(config);

        // TODO: test validations
    }
    
    /**
     * Issue a command to a process
     *
     * Issue a command to a process: start, stop, reload, restart
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3CommandTest() throws Exception {
        String id = null;
        ApiCommand command = null;
        String response = api.restream3Command(id, command);

        // TODO: test validations
    }
    
    /**
     * Delete a process by its ID
     *
     * Delete a process by its ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3DeleteTest() throws Exception {
        String id = null;
        String response = api.restream3Delete(id);

        // TODO: test validations
    }
    
    /**
     * List a process by its ID
     *
     * List a process by its ID. Use the filter parameter to specifiy the level of detail of the output.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3GetTest() throws Exception {
        String id = null;
        String filter = null;
        ApiProcess response = api.restream3Get(id, filter);

        // TODO: test validations
    }
    
    /**
     * List all known processes
     *
     * List all known processes. Use the query parameter to filter the listed processes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3GetAllTest() throws Exception {
        String filter = null;
        String reference = null;
        String id = null;
        List<ApiProcess> response = api.restream3GetAll(filter, reference, id);

        // TODO: test validations
    }
    
    /**
     * Get the configuration of a process
     *
     * Get the configuration of a process. This is the configuration as provided by Add or Update.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3GetConfigTest() throws Exception {
        String id = null;
        ApiProcessConfig response = api.restream3GetConfig(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve JSON metadata stored with a process under a key
     *
     * Retrieve the previously stored JSON metadata under the given key. If the key is empty, all metadata will be returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3GetProcessMetadataTest() throws Exception {
        String id = null;
        String key = null;
        Object response = api.restream3GetProcessMetadata(id, key);

        // TODO: test validations
    }
    
    /**
     * Get the logs of a process
     *
     * Get the logs and the log history of a process
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3GetReportTest() throws Exception {
        String id = null;
        ApiProcessReport response = api.restream3GetReport(id);

        // TODO: test validations
    }
    
    /**
     * Get the state of a process
     *
     * Get the state and progress data of a process
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3GetStateTest() throws Exception {
        String id = null;
        ApiProcessState response = api.restream3GetState(id);

        // TODO: test validations
    }
    
    /**
     * Upload an error frame
     *
     * Upload an error frame which will be encoded immediately
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3PlayoutErrorframeTest() throws Exception {
        String id = null;
        String inputid = null;
        String name = null;
        List<Integer> image = null;
        String response = api.restream3PlayoutErrorframe(id, inputid, name, image);

        // TODO: test validations
    }
    
    /**
     * Encode the errorframe
     *
     * Immediately encode the errorframe (if available and looping)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3PlayoutErrorframencodeTest() throws Exception {
        String id = null;
        String inputid = null;
        String response = api.restream3PlayoutErrorframencode(id, inputid);

        // TODO: test validations
    }
    
    /**
     * Get the last keyframe
     *
     * Get the last keyframe of an input of a process. The extension of the name determines the return type.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3PlayoutKeyframeTest() throws Exception {
        String id = null;
        String inputid = null;
        String name = null;
        File response = api.restream3PlayoutKeyframe(id, inputid, name);

        // TODO: test validations
    }
    
    /**
     * Close the current input stream
     *
     * Close the current input stream such that it will be automatically re-opened
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3PlayoutReopenInputTest() throws Exception {
        String id = null;
        String inputid = null;
        String response = api.restream3PlayoutReopenInput(id, inputid);

        // TODO: test validations
    }
    
    /**
     * Get the current playout status
     *
     * Get the current playout status of an input of a process
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3PlayoutStatusTest() throws Exception {
        String id = null;
        String inputid = null;
        ApiPlayoutStatus response = api.restream3PlayoutStatus(id, inputid);

        // TODO: test validations
    }
    
    /**
     * Switch to a new stream
     *
     * Replace the current stream with the one from the given URL. The switch will only happen if the stream parameters match.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3PlayoutStreamTest() throws Exception {
        String id = null;
        String inputid = null;
        String url = null;
        String response = api.restream3PlayoutStream(id, inputid, url);

        // TODO: test validations
    }
    
    /**
     * Probe a process
     *
     * Probe an existing process to get a detailed stream information on the inputs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3ProbeTest() throws Exception {
        String id = null;
        ApiProbe response = api.restream3Probe(id);

        // TODO: test validations
    }
    
    /**
     * Add JSON metadata with a process under the given key
     *
     * Add arbitrary JSON metadata under the given key. If the key exists, all already stored metadata with this key will be overwritten. If the key doesn&#39;t exist, it will be created.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3SetProcessMetadataTest() throws Exception {
        String id = null;
        String key = null;
        Object data = null;
        Object response = api.restream3SetProcessMetadata(id, key, data);

        // TODO: test validations
    }
    
    /**
     * Replace an existing process
     *
     * Replace an existing process. This is a shortcut for DELETE+POST.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restream3UpdateTest() throws Exception {
        String id = null;
        ApiProcessConfig config = null;
        ApiProcessConfig response = api.restream3Update(id, config);

        // TODO: test validations
    }
    
    /**
     * List all publishing streams
     *
     * List all currently publishing streams
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rtmp3ListChannelsTest() throws Exception {
        List<ApiRTMPChannel> response = api.rtmp3ListChannels();

        // TODO: test validations
    }
    
    /**
     * Get a minimal summary of all active sessions
     *
     * Get a minimal summary of all active sessions (i.e. number of sessions, bandwidth)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void session3CurrentTest() throws Exception {
        String collectors = null;
        ApiSessionsActive response = api.session3Current(collectors);

        // TODO: test validations
    }
    
    /**
     * Get a summary of all active and past sessions
     *
     * Get a summary of all active and past sessions of the given collector
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void session3SummaryTest() throws Exception {
        String collectors = null;
        ApiSessionsSummary response = api.session3Summary(collectors);

        // TODO: test validations
    }
    
    /**
     * FFmpeg capabilities
     *
     * List all detected FFmpeg capabilities
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void skills3Test() throws Exception {
        ApiSkills response = api.skills3();

        // TODO: test validations
    }
    
    /**
     * Refresh FFmpeg capabilities
     *
     * Refresh the available FFmpeg capabilities
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void skills3ReloadTest() throws Exception {
        ApiSkills response = api.skills3Reload();

        // TODO: test validations
    }
    
    /**
     * Swagger UI for this API
     *
     * Swagger UI for this API
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void swaggerTest() throws Exception {
        String response = api.swagger();

        // TODO: test validations
    }
    
    /**
     * Fetch minimal statistics about a process
     *
     * Fetch minimal statistics about a process, which is not protected by any auth.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void widget3GetTest() throws Exception {
        String id = null;
        ApiWidgetProcess response = api.widget3Get(id);

        // TODO: test validations
    }
    
}
