/*
 * datarhei Core API
 * Expose REST API for the datarhei Core
 *
 * OpenAPI spec version: 3.0
 * Contact: hello@datarhei.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ApiSkillsCodec
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-06-20T09:54:33.803Z")
public class ApiSkillsCodec {
  @SerializedName("decoders")
  private List<String> decoders = null;

  @SerializedName("encoders")
  private List<String> encoders = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  public ApiSkillsCodec decoders(List<String> decoders) {
    this.decoders = decoders;
    return this;
  }

  public ApiSkillsCodec addDecodersItem(String decodersItem) {
    if (this.decoders == null) {
      this.decoders = new ArrayList<String>();
    }
    this.decoders.add(decodersItem);
    return this;
  }

   /**
   * Get decoders
   * @return decoders
  **/
  @ApiModelProperty(value = "")
  public List<String> getDecoders() {
    return decoders;
  }

  public void setDecoders(List<String> decoders) {
    this.decoders = decoders;
  }

  public ApiSkillsCodec encoders(List<String> encoders) {
    this.encoders = encoders;
    return this;
  }

  public ApiSkillsCodec addEncodersItem(String encodersItem) {
    if (this.encoders == null) {
      this.encoders = new ArrayList<String>();
    }
    this.encoders.add(encodersItem);
    return this;
  }

   /**
   * Get encoders
   * @return encoders
  **/
  @ApiModelProperty(value = "")
  public List<String> getEncoders() {
    return encoders;
  }

  public void setEncoders(List<String> encoders) {
    this.encoders = encoders;
  }

  public ApiSkillsCodec id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ApiSkillsCodec name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiSkillsCodec apiSkillsCodec = (ApiSkillsCodec) o;
    return Objects.equals(this.decoders, apiSkillsCodec.decoders) &&
        Objects.equals(this.encoders, apiSkillsCodec.encoders) &&
        Objects.equals(this.id, apiSkillsCodec.id) &&
        Objects.equals(this.name, apiSkillsCodec.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decoders, encoders, id, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiSkillsCodec {\n");
    
    sb.append("    decoders: ").append(toIndentedString(decoders)).append("\n");
    sb.append("    encoders: ").append(toIndentedString(encoders)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

